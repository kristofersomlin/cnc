
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  000005d6  0000064a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005d6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000666  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000698  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000006d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000921  00000000  00000000  00000700  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000763  00000000  00000000  00001021  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000034c  00000000  00000000  00001784  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001ad0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000414  00000000  00000000  00001b04  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000023e  00000000  00000000  00001f18  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00002156  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 ed       	ldi	r30, 0xD6	; 214
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 31       	cpi	r26, 0x1C	; 28
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <main>
  8e:	0c 94 e9 02 	jmp	0x5d2	; 0x5d2 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <stepper_move>:

// Ã„ndra denna funktion till en int som returnerar 1 om den funkar och 0 om det blir fel?!?!?!?!?
void stepper_move(int stepper)
{
	// Checking if the motor should move forward
	if(stepper_motors[stepper].forward)
  96:	9c 01       	movw	r18, r24
  98:	22 0f       	add	r18, r18
  9a:	33 1f       	adc	r19, r19
  9c:	f9 01       	movw	r30, r18
  9e:	ee 0f       	add	r30, r30
  a0:	ff 1f       	adc	r31, r31
  a2:	ee 0f       	add	r30, r30
  a4:	ff 1f       	adc	r31, r31
  a6:	ee 0f       	add	r30, r30
  a8:	ff 1f       	adc	r31, r31
  aa:	e2 1b       	sub	r30, r18
  ac:	f3 0b       	sbc	r31, r19
  ae:	e0 50       	subi	r30, 0x00	; 0
  b0:	ff 4f       	sbci	r31, 0xFF	; 255
  b2:	20 85       	ldd	r18, Z+8	; 0x08
  b4:	31 85       	ldd	r19, Z+9	; 0x09
  b6:	23 2b       	or	r18, r19
  b8:	b9 f1       	breq	.+110    	; 0x128 <stepper_move+0x92>
	{
		if(stepper_motors[stepper].stepper_movement<7)
  ba:	9c 01       	movw	r18, r24
  bc:	22 0f       	add	r18, r18
  be:	33 1f       	adc	r19, r19
  c0:	f9 01       	movw	r30, r18
  c2:	ee 0f       	add	r30, r30
  c4:	ff 1f       	adc	r31, r31
  c6:	ee 0f       	add	r30, r30
  c8:	ff 1f       	adc	r31, r31
  ca:	ee 0f       	add	r30, r30
  cc:	ff 1f       	adc	r31, r31
  ce:	e2 1b       	sub	r30, r18
  d0:	f3 0b       	sbc	r31, r19
  d2:	e0 50       	subi	r30, 0x00	; 0
  d4:	ff 4f       	sbci	r31, 0xFF	; 255
  d6:	22 85       	ldd	r18, Z+10	; 0x0a
  d8:	33 85       	ldd	r19, Z+11	; 0x0b
  da:	27 30       	cpi	r18, 0x07	; 7
  dc:	31 05       	cpc	r19, r1
  de:	9c f4       	brge	.+38     	; 0x106 <stepper_move+0x70>
		{
			stepper_motors[stepper].stepper_movement++;
  e0:	ac 01       	movw	r20, r24
  e2:	44 0f       	add	r20, r20
  e4:	55 1f       	adc	r21, r21
  e6:	fa 01       	movw	r30, r20
  e8:	ee 0f       	add	r30, r30
  ea:	ff 1f       	adc	r31, r31
  ec:	ee 0f       	add	r30, r30
  ee:	ff 1f       	adc	r31, r31
  f0:	ee 0f       	add	r30, r30
  f2:	ff 1f       	adc	r31, r31
  f4:	e4 1b       	sub	r30, r20
  f6:	f5 0b       	sbc	r31, r21
  f8:	e0 50       	subi	r30, 0x00	; 0
  fa:	ff 4f       	sbci	r31, 0xFF	; 255
  fc:	2f 5f       	subi	r18, 0xFF	; 255
  fe:	3f 4f       	sbci	r19, 0xFF	; 255
 100:	33 87       	std	Z+11, r19	; 0x0b
 102:	22 87       	std	Z+10, r18	; 0x0a
 104:	49 c0       	rjmp	.+146    	; 0x198 <stepper_move+0x102>
		}
		else
		{
			stepper_motors[stepper].stepper_movement=0;
 106:	9c 01       	movw	r18, r24
 108:	22 0f       	add	r18, r18
 10a:	33 1f       	adc	r19, r19
 10c:	f9 01       	movw	r30, r18
 10e:	ee 0f       	add	r30, r30
 110:	ff 1f       	adc	r31, r31
 112:	ee 0f       	add	r30, r30
 114:	ff 1f       	adc	r31, r31
 116:	ee 0f       	add	r30, r30
 118:	ff 1f       	adc	r31, r31
 11a:	e2 1b       	sub	r30, r18
 11c:	f3 0b       	sbc	r31, r19
 11e:	e0 50       	subi	r30, 0x00	; 0
 120:	ff 4f       	sbci	r31, 0xFF	; 255
 122:	13 86       	std	Z+11, r1	; 0x0b
 124:	12 86       	std	Z+10, r1	; 0x0a
 126:	38 c0       	rjmp	.+112    	; 0x198 <stepper_move+0x102>
		}
	}
	else
	{
		if(stepper_motors[stepper].stepper_movement>0)
 128:	9c 01       	movw	r18, r24
 12a:	22 0f       	add	r18, r18
 12c:	33 1f       	adc	r19, r19
 12e:	f9 01       	movw	r30, r18
 130:	ee 0f       	add	r30, r30
 132:	ff 1f       	adc	r31, r31
 134:	ee 0f       	add	r30, r30
 136:	ff 1f       	adc	r31, r31
 138:	ee 0f       	add	r30, r30
 13a:	ff 1f       	adc	r31, r31
 13c:	e2 1b       	sub	r30, r18
 13e:	f3 0b       	sbc	r31, r19
 140:	e0 50       	subi	r30, 0x00	; 0
 142:	ff 4f       	sbci	r31, 0xFF	; 255
 144:	22 85       	ldd	r18, Z+10	; 0x0a
 146:	33 85       	ldd	r19, Z+11	; 0x0b
 148:	12 16       	cp	r1, r18
 14a:	13 06       	cpc	r1, r19
 14c:	9c f4       	brge	.+38     	; 0x174 <stepper_move+0xde>
		{
			stepper_motors[stepper].stepper_movement--;
 14e:	ac 01       	movw	r20, r24
 150:	44 0f       	add	r20, r20
 152:	55 1f       	adc	r21, r21
 154:	fa 01       	movw	r30, r20
 156:	ee 0f       	add	r30, r30
 158:	ff 1f       	adc	r31, r31
 15a:	ee 0f       	add	r30, r30
 15c:	ff 1f       	adc	r31, r31
 15e:	ee 0f       	add	r30, r30
 160:	ff 1f       	adc	r31, r31
 162:	e4 1b       	sub	r30, r20
 164:	f5 0b       	sbc	r31, r21
 166:	e0 50       	subi	r30, 0x00	; 0
 168:	ff 4f       	sbci	r31, 0xFF	; 255
 16a:	21 50       	subi	r18, 0x01	; 1
 16c:	31 09       	sbc	r19, r1
 16e:	33 87       	std	Z+11, r19	; 0x0b
 170:	22 87       	std	Z+10, r18	; 0x0a
 172:	12 c0       	rjmp	.+36     	; 0x198 <stepper_move+0x102>
		}

		else
		{
			stepper_motors[stepper].stepper_movement=7;
 174:	9c 01       	movw	r18, r24
 176:	22 0f       	add	r18, r18
 178:	33 1f       	adc	r19, r19
 17a:	f9 01       	movw	r30, r18
 17c:	ee 0f       	add	r30, r30
 17e:	ff 1f       	adc	r31, r31
 180:	ee 0f       	add	r30, r30
 182:	ff 1f       	adc	r31, r31
 184:	ee 0f       	add	r30, r30
 186:	ff 1f       	adc	r31, r31
 188:	e2 1b       	sub	r30, r18
 18a:	f3 0b       	sbc	r31, r19
 18c:	e0 50       	subi	r30, 0x00	; 0
 18e:	ff 4f       	sbci	r31, 0xFF	; 255
 190:	27 e0       	ldi	r18, 0x07	; 7
 192:	30 e0       	ldi	r19, 0x00	; 0
 194:	33 87       	std	Z+11, r19	; 0x0b
 196:	22 87       	std	Z+10, r18	; 0x0a
		}
	}
		// Setting PORTB / PORTC to the value depending on what stepper is used.
		*stepper_motors[stepper].port = stepper_motors[stepper].stepper_values[stepper_motors[stepper].stepper_movement];
 198:	88 0f       	add	r24, r24
 19a:	99 1f       	adc	r25, r25
 19c:	fc 01       	movw	r30, r24
 19e:	ee 0f       	add	r30, r30
 1a0:	ff 1f       	adc	r31, r31
 1a2:	ee 0f       	add	r30, r30
 1a4:	ff 1f       	adc	r31, r31
 1a6:	ee 0f       	add	r30, r30
 1a8:	ff 1f       	adc	r31, r31
 1aa:	e8 1b       	sub	r30, r24
 1ac:	f9 0b       	sbc	r31, r25
 1ae:	e0 50       	subi	r30, 0x00	; 0
 1b0:	ff 4f       	sbci	r31, 0xFF	; 255
 1b2:	a4 85       	ldd	r26, Z+12	; 0x0c
 1b4:	b5 85       	ldd	r27, Z+13	; 0x0d
 1b6:	82 85       	ldd	r24, Z+10	; 0x0a
 1b8:	93 85       	ldd	r25, Z+11	; 0x0b
 1ba:	e8 0f       	add	r30, r24
 1bc:	f9 1f       	adc	r31, r25
 1be:	80 81       	ld	r24, Z
 1c0:	8c 93       	st	X, r24
 1c2:	08 95       	ret

000001c4 <main>:
int main(void)
{

	int max_pwm=240;

	DDRC |= 0xFF;
 1c4:	87 b1       	in	r24, 0x07	; 7
 1c6:	8f ef       	ldi	r24, 0xFF	; 255
 1c8:	87 b9       	out	0x07, r24	; 7
	DDRB |= 0xFF;
 1ca:	94 b1       	in	r25, 0x04	; 4
 1cc:	84 b9       	out	0x04, r24	; 4





		stepper_move(0);
 1ce:	80 e0       	ldi	r24, 0x00	; 0
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	0e 94 4b 00 	call	0x96	; 0x96 <stepper_move>
		stepper_move(1);
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	0e 94 4b 00 	call	0x96	; 0x96 <stepper_move>

	DDRC |= 0xFF;
	DDRB |= 0xFF;
	int pwm_timer=0;
	int maxmovement=0;
	double inc_procent=0.2;
 1de:	0f 2e       	mov	r0, r31
 1e0:	fd ec       	ldi	r31, 0xCD	; 205
 1e2:	ff 2e       	mov	r15, r31
 1e4:	f0 2d       	mov	r31, r0
 1e6:	0f 2e       	mov	r0, r31
 1e8:	fc ec       	ldi	r31, 0xCC	; 204
 1ea:	ef 2e       	mov	r14, r31
 1ec:	f0 2d       	mov	r31, r0
 1ee:	0f 2e       	mov	r0, r31
 1f0:	fc e4       	ldi	r31, 0x4C	; 76
 1f2:	df 2e       	mov	r13, r31
 1f4:	f0 2d       	mov	r31, r0
 1f6:	0f 2e       	mov	r0, r31
 1f8:	fe e3       	ldi	r31, 0x3E	; 62
 1fa:	cf 2e       	mov	r12, r31
 1fc:	f0 2d       	mov	r31, r0
	int max_pwm=240;

	DDRC |= 0xFF;
	DDRB |= 0xFF;
	int pwm_timer=0;
	int maxmovement=0;
 1fe:	c0 e0       	ldi	r28, 0x00	; 0
 200:	d0 e0       	ldi	r29, 0x00	; 0

	int max_pwm=240;

	DDRC |= 0xFF;
	DDRB |= 0xFF;
	int pwm_timer=0;
 202:	81 2c       	mov	r8, r1
 204:	91 2c       	mov	r9, r1
		stepper_move(1);
		for(int i=0;i<pwm_timer;i++) {
			_delay_us(1);
		}
	//	PORTC = 0b00000000;
		for(int i=0;i<max_pwm-pwm_timer;i++) {
 206:	00 ef       	ldi	r16, 0xF0	; 240
 208:	10 e0       	ldi	r17, 0x00	; 0
		if(maxmovement>400) {
			PORTC = 0b00000000;
			PORTB = 0b00000000;
			_delay_ms(5000);
			maxmovement=0;
			inc_procent=0.2;
 20a:	0f 2e       	mov	r0, r31
 20c:	fd ec       	ldi	r31, 0xCD	; 205
 20e:	bf 2e       	mov	r11, r31
 210:	f0 2d       	mov	r31, r0
 212:	0f 2e       	mov	r0, r31
 214:	fc ec       	ldi	r31, 0xCC	; 204
 216:	af 2e       	mov	r10, r31
 218:	f0 2d       	mov	r31, r0
 21a:	0f 2e       	mov	r0, r31
 21c:	fc e4       	ldi	r31, 0x4C	; 76
 21e:	7f 2e       	mov	r7, r31
 220:	f0 2d       	mov	r31, r0
 222:	0f 2e       	mov	r0, r31
 224:	fe e3       	ldi	r31, 0x3E	; 62
 226:	6f 2e       	mov	r6, r31
 228:	f0 2d       	mov	r31, r0
 22a:	0a c0       	rjmp	.+20     	; 0x240 <main+0x7c>



		stepper_move(0);
		stepper_move(1);
		for(int i=0;i<pwm_timer;i++) {
 22c:	80 e0       	ldi	r24, 0x00	; 0
 22e:	90 e0       	ldi	r25, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 230:	22 e0       	ldi	r18, 0x02	; 2
 232:	2a 95       	dec	r18
 234:	f1 f7       	brne	.-4      	; 0x232 <main+0x6e>
 236:	00 c0       	rjmp	.+0      	; 0x238 <main+0x74>
 238:	01 96       	adiw	r24, 0x01	; 1
 23a:	88 16       	cp	r8, r24
 23c:	99 06       	cpc	r9, r25
 23e:	c1 f7       	brne	.-16     	; 0x230 <main+0x6c>
			_delay_us(1);
		}
	//	PORTC = 0b00000000;
		for(int i=0;i<max_pwm-pwm_timer;i++) {
 240:	98 01       	movw	r18, r16
 242:	28 19       	sub	r18, r8
 244:	39 09       	sbc	r19, r9
 246:	12 16       	cp	r1, r18
 248:	13 06       	cpc	r1, r19
 24a:	54 f4       	brge	.+20     	; 0x260 <main+0x9c>
 24c:	80 e0       	ldi	r24, 0x00	; 0
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	42 e0       	ldi	r20, 0x02	; 2
 252:	4a 95       	dec	r20
 254:	f1 f7       	brne	.-4      	; 0x252 <main+0x8e>
 256:	00 c0       	rjmp	.+0      	; 0x258 <main+0x94>
 258:	01 96       	adiw	r24, 0x01	; 1
 25a:	82 17       	cp	r24, r18
 25c:	93 07       	cpc	r25, r19
 25e:	c1 f7       	brne	.-16     	; 0x250 <main+0x8c>
			_delay_us(1);
		}
		
		
		if (maxmovement<100) {
 260:	c4 36       	cpi	r28, 0x64	; 100
 262:	d1 05       	cpc	r29, r1
 264:	bc f4       	brge	.+46     	; 0x294 <main+0xd0>
			inc_procent+=0.01;
 266:	2a e0       	ldi	r18, 0x0A	; 10
 268:	37 ed       	ldi	r19, 0xD7	; 215
 26a:	43 e2       	ldi	r20, 0x23	; 35
 26c:	5c e3       	ldi	r21, 0x3C	; 60
 26e:	6f 2d       	mov	r22, r15
 270:	7e 2d       	mov	r23, r14
 272:	8d 2d       	mov	r24, r13
 274:	9c 2d       	mov	r25, r12
 276:	0e 94 89 01 	call	0x312	; 0x312 <__addsf3>
 27a:	f6 2e       	mov	r15, r22
 27c:	e7 2e       	mov	r14, r23
 27e:	d8 2e       	mov	r13, r24
 280:	c9 2e       	mov	r12, r25
			//timershitbalaha++;
			pwm_timer=(int)(inc_procent*(max_pwm*0.96));
 282:	26 e6       	ldi	r18, 0x66	; 102
 284:	36 e6       	ldi	r19, 0x66	; 102
 286:	46 e6       	ldi	r20, 0x66	; 102
 288:	53 e4       	ldi	r21, 0x43	; 67
 28a:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <__mulsf3>
 28e:	0e 94 f5 01 	call	0x3ea	; 0x3ea <__fixsfsi>
 292:	4b 01       	movw	r8, r22
		}

		if(maxmovement>300) {
 294:	cd 32       	cpi	r28, 0x2D	; 45
 296:	81 e0       	ldi	r24, 0x01	; 1
 298:	d8 07       	cpc	r29, r24
 29a:	bc f0       	brlt	.+46     	; 0x2ca <main+0x106>
			inc_procent-=0.01;
 29c:	2a e0       	ldi	r18, 0x0A	; 10
 29e:	37 ed       	ldi	r19, 0xD7	; 215
 2a0:	43 e2       	ldi	r20, 0x23	; 35
 2a2:	5c e3       	ldi	r21, 0x3C	; 60
 2a4:	6f 2d       	mov	r22, r15
 2a6:	7e 2d       	mov	r23, r14
 2a8:	8d 2d       	mov	r24, r13
 2aa:	9c 2d       	mov	r25, r12
 2ac:	0e 94 88 01 	call	0x310	; 0x310 <__subsf3>
 2b0:	f6 2e       	mov	r15, r22
 2b2:	e7 2e       	mov	r14, r23
 2b4:	d8 2e       	mov	r13, r24
 2b6:	c9 2e       	mov	r12, r25
			//timershitbalaha++;
			pwm_timer=(int)(inc_procent*(max_pwm*0.96));
 2b8:	26 e6       	ldi	r18, 0x66	; 102
 2ba:	36 e6       	ldi	r19, 0x66	; 102
 2bc:	46 e6       	ldi	r20, 0x66	; 102
 2be:	53 e4       	ldi	r21, 0x43	; 67
 2c0:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <__mulsf3>
 2c4:	0e 94 f5 01 	call	0x3ea	; 0x3ea <__fixsfsi>
 2c8:	4b 01       	movw	r8, r22
		}
		if(maxmovement>400) {
 2ca:	c1 39       	cpi	r28, 0x91	; 145
 2cc:	91 e0       	ldi	r25, 0x01	; 1
 2ce:	d9 07       	cpc	r29, r25
 2d0:	8c f0       	brlt	.+34     	; 0x2f4 <main+0x130>
			PORTC = 0b00000000;
 2d2:	18 b8       	out	0x08, r1	; 8
			PORTB = 0b00000000;
 2d4:	15 b8       	out	0x05, r1	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2d6:	2f ef       	ldi	r18, 0xFF	; 255
 2d8:	41 e1       	ldi	r20, 0x11	; 17
 2da:	8a e7       	ldi	r24, 0x7A	; 122
 2dc:	21 50       	subi	r18, 0x01	; 1
 2de:	40 40       	sbci	r20, 0x00	; 0
 2e0:	80 40       	sbci	r24, 0x00	; 0
 2e2:	e1 f7       	brne	.-8      	; 0x2dc <main+0x118>
 2e4:	00 c0       	rjmp	.+0      	; 0x2e6 <main+0x122>
 2e6:	00 00       	nop
			_delay_ms(5000);
			maxmovement=0;
			inc_procent=0.2;
 2e8:	fb 2c       	mov	r15, r11
 2ea:	ea 2c       	mov	r14, r10
 2ec:	d7 2c       	mov	r13, r7
 2ee:	c6 2c       	mov	r12, r6
		}
		if(maxmovement>400) {
			PORTC = 0b00000000;
			PORTB = 0b00000000;
			_delay_ms(5000);
			maxmovement=0;
 2f0:	c0 e0       	ldi	r28, 0x00	; 0
 2f2:	d0 e0       	ldi	r29, 0x00	; 0
			inc_procent=0.2;
		}
maxmovement++;
 2f4:	21 96       	adiw	r28, 0x01	; 1





		stepper_move(0);
 2f6:	80 e0       	ldi	r24, 0x00	; 0
 2f8:	90 e0       	ldi	r25, 0x00	; 0
 2fa:	0e 94 4b 00 	call	0x96	; 0x96 <stepper_move>
		stepper_move(1);
 2fe:	81 e0       	ldi	r24, 0x01	; 1
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	0e 94 4b 00 	call	0x96	; 0x96 <stepper_move>
		for(int i=0;i<pwm_timer;i++) {
 306:	18 14       	cp	r1, r8
 308:	19 04       	cpc	r1, r9
 30a:	0c f4       	brge	.+2      	; 0x30e <main+0x14a>
 30c:	8f cf       	rjmp	.-226    	; 0x22c <main+0x68>
 30e:	98 cf       	rjmp	.-208    	; 0x240 <main+0x7c>

00000310 <__subsf3>:
 310:	50 58       	subi	r21, 0x80	; 128

00000312 <__addsf3>:
 312:	bb 27       	eor	r27, r27
 314:	aa 27       	eor	r26, r26
 316:	0e 94 a0 01 	call	0x340	; 0x340 <__addsf3x>
 31a:	0c 94 42 02 	jmp	0x484	; 0x484 <__fp_round>
 31e:	0e 94 34 02 	call	0x468	; 0x468 <__fp_pscA>
 322:	38 f0       	brcs	.+14     	; 0x332 <__addsf3+0x20>
 324:	0e 94 3b 02 	call	0x476	; 0x476 <__fp_pscB>
 328:	20 f0       	brcs	.+8      	; 0x332 <__addsf3+0x20>
 32a:	39 f4       	brne	.+14     	; 0x33a <__addsf3+0x28>
 32c:	9f 3f       	cpi	r25, 0xFF	; 255
 32e:	19 f4       	brne	.+6      	; 0x336 <__addsf3+0x24>
 330:	26 f4       	brtc	.+8      	; 0x33a <__addsf3+0x28>
 332:	0c 94 31 02 	jmp	0x462	; 0x462 <__fp_nan>
 336:	0e f4       	brtc	.+2      	; 0x33a <__addsf3+0x28>
 338:	e0 95       	com	r30
 33a:	e7 fb       	bst	r30, 7
 33c:	0c 94 2b 02 	jmp	0x456	; 0x456 <__fp_inf>

00000340 <__addsf3x>:
 340:	e9 2f       	mov	r30, r25
 342:	0e 94 53 02 	call	0x4a6	; 0x4a6 <__fp_split3>
 346:	58 f3       	brcs	.-42     	; 0x31e <__addsf3+0xc>
 348:	ba 17       	cp	r27, r26
 34a:	62 07       	cpc	r22, r18
 34c:	73 07       	cpc	r23, r19
 34e:	84 07       	cpc	r24, r20
 350:	95 07       	cpc	r25, r21
 352:	20 f0       	brcs	.+8      	; 0x35c <__addsf3x+0x1c>
 354:	79 f4       	brne	.+30     	; 0x374 <__addsf3x+0x34>
 356:	a6 f5       	brtc	.+104    	; 0x3c0 <__addsf3x+0x80>
 358:	0c 94 75 02 	jmp	0x4ea	; 0x4ea <__fp_zero>
 35c:	0e f4       	brtc	.+2      	; 0x360 <__addsf3x+0x20>
 35e:	e0 95       	com	r30
 360:	0b 2e       	mov	r0, r27
 362:	ba 2f       	mov	r27, r26
 364:	a0 2d       	mov	r26, r0
 366:	0b 01       	movw	r0, r22
 368:	b9 01       	movw	r22, r18
 36a:	90 01       	movw	r18, r0
 36c:	0c 01       	movw	r0, r24
 36e:	ca 01       	movw	r24, r20
 370:	a0 01       	movw	r20, r0
 372:	11 24       	eor	r1, r1
 374:	ff 27       	eor	r31, r31
 376:	59 1b       	sub	r21, r25
 378:	99 f0       	breq	.+38     	; 0x3a0 <__addsf3x+0x60>
 37a:	59 3f       	cpi	r21, 0xF9	; 249
 37c:	50 f4       	brcc	.+20     	; 0x392 <__addsf3x+0x52>
 37e:	50 3e       	cpi	r21, 0xE0	; 224
 380:	68 f1       	brcs	.+90     	; 0x3dc <__addsf3x+0x9c>
 382:	1a 16       	cp	r1, r26
 384:	f0 40       	sbci	r31, 0x00	; 0
 386:	a2 2f       	mov	r26, r18
 388:	23 2f       	mov	r18, r19
 38a:	34 2f       	mov	r19, r20
 38c:	44 27       	eor	r20, r20
 38e:	58 5f       	subi	r21, 0xF8	; 248
 390:	f3 cf       	rjmp	.-26     	; 0x378 <__addsf3x+0x38>
 392:	46 95       	lsr	r20
 394:	37 95       	ror	r19
 396:	27 95       	ror	r18
 398:	a7 95       	ror	r26
 39a:	f0 40       	sbci	r31, 0x00	; 0
 39c:	53 95       	inc	r21
 39e:	c9 f7       	brne	.-14     	; 0x392 <__addsf3x+0x52>
 3a0:	7e f4       	brtc	.+30     	; 0x3c0 <__addsf3x+0x80>
 3a2:	1f 16       	cp	r1, r31
 3a4:	ba 0b       	sbc	r27, r26
 3a6:	62 0b       	sbc	r22, r18
 3a8:	73 0b       	sbc	r23, r19
 3aa:	84 0b       	sbc	r24, r20
 3ac:	ba f0       	brmi	.+46     	; 0x3dc <__addsf3x+0x9c>
 3ae:	91 50       	subi	r25, 0x01	; 1
 3b0:	a1 f0       	breq	.+40     	; 0x3da <__addsf3x+0x9a>
 3b2:	ff 0f       	add	r31, r31
 3b4:	bb 1f       	adc	r27, r27
 3b6:	66 1f       	adc	r22, r22
 3b8:	77 1f       	adc	r23, r23
 3ba:	88 1f       	adc	r24, r24
 3bc:	c2 f7       	brpl	.-16     	; 0x3ae <__addsf3x+0x6e>
 3be:	0e c0       	rjmp	.+28     	; 0x3dc <__addsf3x+0x9c>
 3c0:	ba 0f       	add	r27, r26
 3c2:	62 1f       	adc	r22, r18
 3c4:	73 1f       	adc	r23, r19
 3c6:	84 1f       	adc	r24, r20
 3c8:	48 f4       	brcc	.+18     	; 0x3dc <__addsf3x+0x9c>
 3ca:	87 95       	ror	r24
 3cc:	77 95       	ror	r23
 3ce:	67 95       	ror	r22
 3d0:	b7 95       	ror	r27
 3d2:	f7 95       	ror	r31
 3d4:	9e 3f       	cpi	r25, 0xFE	; 254
 3d6:	08 f0       	brcs	.+2      	; 0x3da <__addsf3x+0x9a>
 3d8:	b0 cf       	rjmp	.-160    	; 0x33a <__addsf3+0x28>
 3da:	93 95       	inc	r25
 3dc:	88 0f       	add	r24, r24
 3de:	08 f0       	brcs	.+2      	; 0x3e2 <__addsf3x+0xa2>
 3e0:	99 27       	eor	r25, r25
 3e2:	ee 0f       	add	r30, r30
 3e4:	97 95       	ror	r25
 3e6:	87 95       	ror	r24
 3e8:	08 95       	ret

000003ea <__fixsfsi>:
 3ea:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <__fixunssfsi>
 3ee:	68 94       	set
 3f0:	b1 11       	cpse	r27, r1
 3f2:	0c 94 76 02 	jmp	0x4ec	; 0x4ec <__fp_szero>
 3f6:	08 95       	ret

000003f8 <__fixunssfsi>:
 3f8:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <__fp_splitA>
 3fc:	88 f0       	brcs	.+34     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 3fe:	9f 57       	subi	r25, 0x7F	; 127
 400:	98 f0       	brcs	.+38     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 402:	b9 2f       	mov	r27, r25
 404:	99 27       	eor	r25, r25
 406:	b7 51       	subi	r27, 0x17	; 23
 408:	b0 f0       	brcs	.+44     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 40a:	e1 f0       	breq	.+56     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
 40c:	66 0f       	add	r22, r22
 40e:	77 1f       	adc	r23, r23
 410:	88 1f       	adc	r24, r24
 412:	99 1f       	adc	r25, r25
 414:	1a f0       	brmi	.+6      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 416:	ba 95       	dec	r27
 418:	c9 f7       	brne	.-14     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 41a:	14 c0       	rjmp	.+40     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
 41c:	b1 30       	cpi	r27, 0x01	; 1
 41e:	91 f0       	breq	.+36     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
 420:	0e 94 75 02 	call	0x4ea	; 0x4ea <__fp_zero>
 424:	b1 e0       	ldi	r27, 0x01	; 1
 426:	08 95       	ret
 428:	0c 94 75 02 	jmp	0x4ea	; 0x4ea <__fp_zero>
 42c:	67 2f       	mov	r22, r23
 42e:	78 2f       	mov	r23, r24
 430:	88 27       	eor	r24, r24
 432:	b8 5f       	subi	r27, 0xF8	; 248
 434:	39 f0       	breq	.+14     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
 436:	b9 3f       	cpi	r27, 0xF9	; 249
 438:	cc f3       	brlt	.-14     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 43a:	86 95       	lsr	r24
 43c:	77 95       	ror	r23
 43e:	67 95       	ror	r22
 440:	b3 95       	inc	r27
 442:	d9 f7       	brne	.-10     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
 444:	3e f4       	brtc	.+14     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
 446:	90 95       	com	r25
 448:	80 95       	com	r24
 44a:	70 95       	com	r23
 44c:	61 95       	neg	r22
 44e:	7f 4f       	sbci	r23, 0xFF	; 255
 450:	8f 4f       	sbci	r24, 0xFF	; 255
 452:	9f 4f       	sbci	r25, 0xFF	; 255
 454:	08 95       	ret

00000456 <__fp_inf>:
 456:	97 f9       	bld	r25, 7
 458:	9f 67       	ori	r25, 0x7F	; 127
 45a:	80 e8       	ldi	r24, 0x80	; 128
 45c:	70 e0       	ldi	r23, 0x00	; 0
 45e:	60 e0       	ldi	r22, 0x00	; 0
 460:	08 95       	ret

00000462 <__fp_nan>:
 462:	9f ef       	ldi	r25, 0xFF	; 255
 464:	80 ec       	ldi	r24, 0xC0	; 192
 466:	08 95       	ret

00000468 <__fp_pscA>:
 468:	00 24       	eor	r0, r0
 46a:	0a 94       	dec	r0
 46c:	16 16       	cp	r1, r22
 46e:	17 06       	cpc	r1, r23
 470:	18 06       	cpc	r1, r24
 472:	09 06       	cpc	r0, r25
 474:	08 95       	ret

00000476 <__fp_pscB>:
 476:	00 24       	eor	r0, r0
 478:	0a 94       	dec	r0
 47a:	12 16       	cp	r1, r18
 47c:	13 06       	cpc	r1, r19
 47e:	14 06       	cpc	r1, r20
 480:	05 06       	cpc	r0, r21
 482:	08 95       	ret

00000484 <__fp_round>:
 484:	09 2e       	mov	r0, r25
 486:	03 94       	inc	r0
 488:	00 0c       	add	r0, r0
 48a:	11 f4       	brne	.+4      	; 0x490 <__fp_round+0xc>
 48c:	88 23       	and	r24, r24
 48e:	52 f0       	brmi	.+20     	; 0x4a4 <__fp_round+0x20>
 490:	bb 0f       	add	r27, r27
 492:	40 f4       	brcc	.+16     	; 0x4a4 <__fp_round+0x20>
 494:	bf 2b       	or	r27, r31
 496:	11 f4       	brne	.+4      	; 0x49c <__fp_round+0x18>
 498:	60 ff       	sbrs	r22, 0
 49a:	04 c0       	rjmp	.+8      	; 0x4a4 <__fp_round+0x20>
 49c:	6f 5f       	subi	r22, 0xFF	; 255
 49e:	7f 4f       	sbci	r23, 0xFF	; 255
 4a0:	8f 4f       	sbci	r24, 0xFF	; 255
 4a2:	9f 4f       	sbci	r25, 0xFF	; 255
 4a4:	08 95       	ret

000004a6 <__fp_split3>:
 4a6:	57 fd       	sbrc	r21, 7
 4a8:	90 58       	subi	r25, 0x80	; 128
 4aa:	44 0f       	add	r20, r20
 4ac:	55 1f       	adc	r21, r21
 4ae:	59 f0       	breq	.+22     	; 0x4c6 <__fp_splitA+0x10>
 4b0:	5f 3f       	cpi	r21, 0xFF	; 255
 4b2:	71 f0       	breq	.+28     	; 0x4d0 <__fp_splitA+0x1a>
 4b4:	47 95       	ror	r20

000004b6 <__fp_splitA>:
 4b6:	88 0f       	add	r24, r24
 4b8:	97 fb       	bst	r25, 7
 4ba:	99 1f       	adc	r25, r25
 4bc:	61 f0       	breq	.+24     	; 0x4d6 <__fp_splitA+0x20>
 4be:	9f 3f       	cpi	r25, 0xFF	; 255
 4c0:	79 f0       	breq	.+30     	; 0x4e0 <__fp_splitA+0x2a>
 4c2:	87 95       	ror	r24
 4c4:	08 95       	ret
 4c6:	12 16       	cp	r1, r18
 4c8:	13 06       	cpc	r1, r19
 4ca:	14 06       	cpc	r1, r20
 4cc:	55 1f       	adc	r21, r21
 4ce:	f2 cf       	rjmp	.-28     	; 0x4b4 <__fp_split3+0xe>
 4d0:	46 95       	lsr	r20
 4d2:	f1 df       	rcall	.-30     	; 0x4b6 <__fp_splitA>
 4d4:	08 c0       	rjmp	.+16     	; 0x4e6 <__fp_splitA+0x30>
 4d6:	16 16       	cp	r1, r22
 4d8:	17 06       	cpc	r1, r23
 4da:	18 06       	cpc	r1, r24
 4dc:	99 1f       	adc	r25, r25
 4de:	f1 cf       	rjmp	.-30     	; 0x4c2 <__fp_splitA+0xc>
 4e0:	86 95       	lsr	r24
 4e2:	71 05       	cpc	r23, r1
 4e4:	61 05       	cpc	r22, r1
 4e6:	08 94       	sec
 4e8:	08 95       	ret

000004ea <__fp_zero>:
 4ea:	e8 94       	clt

000004ec <__fp_szero>:
 4ec:	bb 27       	eor	r27, r27
 4ee:	66 27       	eor	r22, r22
 4f0:	77 27       	eor	r23, r23
 4f2:	cb 01       	movw	r24, r22
 4f4:	97 f9       	bld	r25, 7
 4f6:	08 95       	ret

000004f8 <__mulsf3>:
 4f8:	0e 94 8f 02 	call	0x51e	; 0x51e <__mulsf3x>
 4fc:	0c 94 42 02 	jmp	0x484	; 0x484 <__fp_round>
 500:	0e 94 34 02 	call	0x468	; 0x468 <__fp_pscA>
 504:	38 f0       	brcs	.+14     	; 0x514 <__mulsf3+0x1c>
 506:	0e 94 3b 02 	call	0x476	; 0x476 <__fp_pscB>
 50a:	20 f0       	brcs	.+8      	; 0x514 <__mulsf3+0x1c>
 50c:	95 23       	and	r25, r21
 50e:	11 f0       	breq	.+4      	; 0x514 <__mulsf3+0x1c>
 510:	0c 94 2b 02 	jmp	0x456	; 0x456 <__fp_inf>
 514:	0c 94 31 02 	jmp	0x462	; 0x462 <__fp_nan>
 518:	11 24       	eor	r1, r1
 51a:	0c 94 76 02 	jmp	0x4ec	; 0x4ec <__fp_szero>

0000051e <__mulsf3x>:
 51e:	0e 94 53 02 	call	0x4a6	; 0x4a6 <__fp_split3>
 522:	70 f3       	brcs	.-36     	; 0x500 <__mulsf3+0x8>

00000524 <__mulsf3_pse>:
 524:	95 9f       	mul	r25, r21
 526:	c1 f3       	breq	.-16     	; 0x518 <__mulsf3+0x20>
 528:	95 0f       	add	r25, r21
 52a:	50 e0       	ldi	r21, 0x00	; 0
 52c:	55 1f       	adc	r21, r21
 52e:	62 9f       	mul	r22, r18
 530:	f0 01       	movw	r30, r0
 532:	72 9f       	mul	r23, r18
 534:	bb 27       	eor	r27, r27
 536:	f0 0d       	add	r31, r0
 538:	b1 1d       	adc	r27, r1
 53a:	63 9f       	mul	r22, r19
 53c:	aa 27       	eor	r26, r26
 53e:	f0 0d       	add	r31, r0
 540:	b1 1d       	adc	r27, r1
 542:	aa 1f       	adc	r26, r26
 544:	64 9f       	mul	r22, r20
 546:	66 27       	eor	r22, r22
 548:	b0 0d       	add	r27, r0
 54a:	a1 1d       	adc	r26, r1
 54c:	66 1f       	adc	r22, r22
 54e:	82 9f       	mul	r24, r18
 550:	22 27       	eor	r18, r18
 552:	b0 0d       	add	r27, r0
 554:	a1 1d       	adc	r26, r1
 556:	62 1f       	adc	r22, r18
 558:	73 9f       	mul	r23, r19
 55a:	b0 0d       	add	r27, r0
 55c:	a1 1d       	adc	r26, r1
 55e:	62 1f       	adc	r22, r18
 560:	83 9f       	mul	r24, r19
 562:	a0 0d       	add	r26, r0
 564:	61 1d       	adc	r22, r1
 566:	22 1f       	adc	r18, r18
 568:	74 9f       	mul	r23, r20
 56a:	33 27       	eor	r19, r19
 56c:	a0 0d       	add	r26, r0
 56e:	61 1d       	adc	r22, r1
 570:	23 1f       	adc	r18, r19
 572:	84 9f       	mul	r24, r20
 574:	60 0d       	add	r22, r0
 576:	21 1d       	adc	r18, r1
 578:	82 2f       	mov	r24, r18
 57a:	76 2f       	mov	r23, r22
 57c:	6a 2f       	mov	r22, r26
 57e:	11 24       	eor	r1, r1
 580:	9f 57       	subi	r25, 0x7F	; 127
 582:	50 40       	sbci	r21, 0x00	; 0
 584:	9a f0       	brmi	.+38     	; 0x5ac <__mulsf3_pse+0x88>
 586:	f1 f0       	breq	.+60     	; 0x5c4 <__mulsf3_pse+0xa0>
 588:	88 23       	and	r24, r24
 58a:	4a f0       	brmi	.+18     	; 0x59e <__mulsf3_pse+0x7a>
 58c:	ee 0f       	add	r30, r30
 58e:	ff 1f       	adc	r31, r31
 590:	bb 1f       	adc	r27, r27
 592:	66 1f       	adc	r22, r22
 594:	77 1f       	adc	r23, r23
 596:	88 1f       	adc	r24, r24
 598:	91 50       	subi	r25, 0x01	; 1
 59a:	50 40       	sbci	r21, 0x00	; 0
 59c:	a9 f7       	brne	.-22     	; 0x588 <__mulsf3_pse+0x64>
 59e:	9e 3f       	cpi	r25, 0xFE	; 254
 5a0:	51 05       	cpc	r21, r1
 5a2:	80 f0       	brcs	.+32     	; 0x5c4 <__mulsf3_pse+0xa0>
 5a4:	0c 94 2b 02 	jmp	0x456	; 0x456 <__fp_inf>
 5a8:	0c 94 76 02 	jmp	0x4ec	; 0x4ec <__fp_szero>
 5ac:	5f 3f       	cpi	r21, 0xFF	; 255
 5ae:	e4 f3       	brlt	.-8      	; 0x5a8 <__mulsf3_pse+0x84>
 5b0:	98 3e       	cpi	r25, 0xE8	; 232
 5b2:	d4 f3       	brlt	.-12     	; 0x5a8 <__mulsf3_pse+0x84>
 5b4:	86 95       	lsr	r24
 5b6:	77 95       	ror	r23
 5b8:	67 95       	ror	r22
 5ba:	b7 95       	ror	r27
 5bc:	f7 95       	ror	r31
 5be:	e7 95       	ror	r30
 5c0:	9f 5f       	subi	r25, 0xFF	; 255
 5c2:	c1 f7       	brne	.-16     	; 0x5b4 <__mulsf3_pse+0x90>
 5c4:	fe 2b       	or	r31, r30
 5c6:	88 0f       	add	r24, r24
 5c8:	91 1d       	adc	r25, r1
 5ca:	96 95       	lsr	r25
 5cc:	87 95       	ror	r24
 5ce:	97 f9       	bld	r25, 7
 5d0:	08 95       	ret

000005d2 <_exit>:
 5d2:	f8 94       	cli

000005d4 <__stop_program>:
 5d4:	ff cf       	rjmp	.-2      	; 0x5d4 <__stop_program>
