
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000252  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001de  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  00000252  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000252  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000284  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  000002c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007dd  00000000  00000000  00000324  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006a5  00000000  00000000  00000b01  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000038f  00000000  00000000  000011a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a4  00000000  00000000  00001538  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003db  00000000  00000000  000015dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  000019b7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a4 30       	cpi	r26, 0x04	; 4
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <main>
  88:	0c 94 ed 00 	jmp	0x1da	; 0x1da <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <coil1>:
void coil4();
void coil41();


void coil1() {
	PORTC = 0b00000001;
  90:	81 e0       	ldi	r24, 0x01	; 1
  92:	88 b9       	out	0x08, r24	; 8
	coil = forward ? coil12 : coil41;
  94:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  98:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  9c:	89 2b       	or	r24, r25
  9e:	19 f4       	brne	.+6      	; 0xa6 <coil1+0x16>
  a0:	86 ec       	ldi	r24, 0xC6	; 198
  a2:	90 e0       	ldi	r25, 0x00	; 0
  a4:	02 c0       	rjmp	.+4      	; 0xaa <coil1+0x1a>
  a6:	8a e5       	ldi	r24, 0x5A	; 90
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <coil+0x1>
  ae:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <coil>
  b2:	08 95       	ret

000000b4 <coil12>:
}
void coil12() {
	PORTC = 0b00000011;
  b4:	83 e0       	ldi	r24, 0x03	; 3
  b6:	88 b9       	out	0x08, r24	; 8
	coil = forward ? coil2 : coil1;
  b8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  bc:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  c0:	89 2b       	or	r24, r25
  c2:	19 f4       	brne	.+6      	; 0xca <coil12+0x16>
  c4:	88 e4       	ldi	r24, 0x48	; 72
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	02 c0       	rjmp	.+4      	; 0xce <coil12+0x1a>
  ca:	8c e6       	ldi	r24, 0x6C	; 108
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <coil+0x1>
  d2:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <coil>
  d6:	08 95       	ret

000000d8 <coil2>:
}
void coil2() {
	PORTC = 0b00000010;
  d8:	82 e0       	ldi	r24, 0x02	; 2
  da:	88 b9       	out	0x08, r24	; 8
	coil = forward ? coil23 : coil12;
  dc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  e0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  e4:	89 2b       	or	r24, r25
  e6:	19 f4       	brne	.+6      	; 0xee <coil2+0x16>
  e8:	8a e5       	ldi	r24, 0x5A	; 90
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	02 c0       	rjmp	.+4      	; 0xf2 <coil2+0x1a>
  ee:	8e e7       	ldi	r24, 0x7E	; 126
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <coil+0x1>
  f6:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <coil>
  fa:	08 95       	ret

000000fc <coil23>:
}
void coil23() {
	PORTC = 0b00000110;
  fc:	86 e0       	ldi	r24, 0x06	; 6
  fe:	88 b9       	out	0x08, r24	; 8
	coil = forward ? coil3 : coil2;
 100:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 104:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 108:	89 2b       	or	r24, r25
 10a:	19 f4       	brne	.+6      	; 0x112 <coil23+0x16>
 10c:	8c e6       	ldi	r24, 0x6C	; 108
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	02 c0       	rjmp	.+4      	; 0x116 <coil23+0x1a>
 112:	80 e9       	ldi	r24, 0x90	; 144
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <coil+0x1>
 11a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <coil>
 11e:	08 95       	ret

00000120 <coil3>:
}
void coil3() {
	PORTC = 0b00000100;
 120:	84 e0       	ldi	r24, 0x04	; 4
 122:	88 b9       	out	0x08, r24	; 8
	coil = forward ? coil34 : coil23;
 124:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 128:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 12c:	89 2b       	or	r24, r25
 12e:	19 f4       	brne	.+6      	; 0x136 <coil3+0x16>
 130:	8e e7       	ldi	r24, 0x7E	; 126
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	02 c0       	rjmp	.+4      	; 0x13a <coil3+0x1a>
 136:	82 ea       	ldi	r24, 0xA2	; 162
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <coil+0x1>
 13e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <coil>
 142:	08 95       	ret

00000144 <coil34>:
}

void coil34() {
	PORTC = 0b00001100;
 144:	8c e0       	ldi	r24, 0x0C	; 12
 146:	88 b9       	out	0x08, r24	; 8
	coil = forward ? coil4 : coil3;
 148:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 14c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 150:	89 2b       	or	r24, r25
 152:	19 f4       	brne	.+6      	; 0x15a <coil34+0x16>
 154:	80 e9       	ldi	r24, 0x90	; 144
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	02 c0       	rjmp	.+4      	; 0x15e <coil34+0x1a>
 15a:	84 eb       	ldi	r24, 0xB4	; 180
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <coil+0x1>
 162:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <coil>
 166:	08 95       	ret

00000168 <coil4>:
}
void coil4() {
	PORTC = 0b00001000;
 168:	88 e0       	ldi	r24, 0x08	; 8
 16a:	88 b9       	out	0x08, r24	; 8
	coil = forward ? coil41 : coil34;
 16c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 170:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 174:	89 2b       	or	r24, r25
 176:	19 f4       	brne	.+6      	; 0x17e <coil4+0x16>
 178:	82 ea       	ldi	r24, 0xA2	; 162
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	02 c0       	rjmp	.+4      	; 0x182 <coil4+0x1a>
 17e:	86 ec       	ldi	r24, 0xC6	; 198
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <coil+0x1>
 186:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <coil>
 18a:	08 95       	ret

0000018c <coil41>:
}
void coil41() {
	PORTC = 0b00001001;
 18c:	89 e0       	ldi	r24, 0x09	; 9
 18e:	88 b9       	out	0x08, r24	; 8
	coil = forward ? coil1 : coil4;
 190:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 194:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 198:	89 2b       	or	r24, r25
 19a:	19 f4       	brne	.+6      	; 0x1a2 <coil41+0x16>
 19c:	84 eb       	ldi	r24, 0xB4	; 180
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	02 c0       	rjmp	.+4      	; 0x1a6 <coil41+0x1a>
 1a2:	88 e4       	ldi	r24, 0x48	; 72
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <coil+0x1>
 1aa:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <coil>
 1ae:	08 95       	ret

000001b0 <main>:
}


int main(void)
{
	DDRC |= 0xFF;
 1b0:	87 b1       	in	r24, 0x07	; 7
 1b2:	8f ef       	ldi	r24, 0xFF	; 255
 1b4:	87 b9       	out	0x07, r24	; 7
	coil=coil1;
 1b6:	88 e4       	ldi	r24, 0x48	; 72
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <coil+0x1>
 1be:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <coil>
	while (1)
	{
		coil();
 1c2:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <coil>
 1c6:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <coil+0x1>
 1ca:	09 95       	icall
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1cc:	87 e7       	ldi	r24, 0x77	; 119
 1ce:	95 e0       	ldi	r25, 0x05	; 5
 1d0:	01 97       	sbiw	r24, 0x01	; 1
 1d2:	f1 f7       	brne	.-4      	; 0x1d0 <main+0x20>
 1d4:	00 c0       	rjmp	.+0      	; 0x1d6 <main+0x26>
 1d6:	00 00       	nop
 1d8:	f4 cf       	rjmp	.-24     	; 0x1c2 <main+0x12>

000001da <_exit>:
 1da:	f8 94       	cli

000001dc <__stop_program>:
 1dc:	ff cf       	rjmp	.-2      	; 0x1dc <__stop_program>
